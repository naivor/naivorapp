apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'androidx.navigation.safeargs.kotlin'


android {
    compileSdkVersion libs.versions.compileSdk.get().toInteger()

    def version = 1

    defaultConfig {
        applicationId "com.naivor.android.app"
        minSdkVersion libs.versions.minSdk.get().toInteger()
        targetSdkVersion libs.versions.targetSdk.get().toInteger()
        versionCode getVersionWithGitCommit(version)
        versionName "1.0.0"
        vectorDrawables.useSupportLibrary true

        buildConfigField("String", "UNSPLASH_ACCESS_KEY", "\"" + getUnsplashAccess() + "\"")
    }


    buildTypes {
        debug {
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage', 'MissingTranslation', 'CheckResult'
    }

    kotlinOptions {
        jvmTarget = '1.8'

        // Enable Coroutines and Flow APIs
        freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
        freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.FlowPreview"
    }

    buildFeatures {
        viewBinding true
    }

    packagingOptions {
        // Multiple dependency bring these files in. Exclude them to enable
        // our test APK to build (has no effect on our AARs)
        excludes += "/META-INF/AL2.0"
        excludes += "/META-INF/LGPL2.1"

        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/rxjava.properties'
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def buildTime = new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
            outputFileName = "naivorapp-v${versionName}-${versionCode}-${buildTime}.apk"
        }
    }

}


dependencies {

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation project(path: ':adapter')
    implementation project(path: ':kotlinex')
//    implementation project(path: ':widget')

    //  JetPack Foundationy
    implementation(libs.appcompat)
    implementation(libs.ktxCore)

    implementation(libs.coroutinesAndroid)
    implementation(libs.coroutinesCore)


    //  JetPack Architecture
    kapt(libs.hiltCompiler)
    implementation(libs.hiltAndroid)

    kapt(libs.roomCompiler)
    implementation(libs.roomKtx)
    implementation(libs.roomRuntime)

    implementation(libs.lifecycle)
    implementation(libs.livedata)
    implementation(libs.viewmodel)

    implementation(libs.navigationFragment)
    implementation(libs.navigationUi)

    implementation(libs.workManager)

    //  JetPack UI
    implementation(libs.fragment)
    implementation(libs.constraintlayout)
    implementation(libs.recyclerview)
    implementation(libs.material)
    implementation(libs.viewpager)
    implementation(libs.flexbox)
    implementation(libs.swiperefreshlayout)

    //  Google Others
    kapt(libs.glideCompiler)
    implementation(libs.glide)

    implementation(libs.gson)

    //  ThirdPart Library
    implementation(libs.timber)

    implementation(libs.retrofit)
    implementation(libs.converterGson)
    implementation(libs.loggingInterceptor)



    //  Test
    kaptAndroidTest(libs.hiltCompiler)

    androidTestImplementation(libs.coreTest)

    androidTestImplementation(libs.espressoContrib)
    androidTestImplementation(libs.espressoCore)
    androidTestImplementation(libs.espressoIntents)

    androidTestImplementation(libs.extJunit)
    testImplementation(libs.junit)

    androidTestImplementation(libs.uiAutomator)

    androidTestImplementation(libs.workTest)

    androidTestImplementation(libs.truth)

    androidTestImplementation(libs.hiltTest)

    androidTestImplementation(libs.coroutinesTest)

    testImplementation(libs.mockitoCore)
    androidTestImplementation(libs.mockitoAndroid)

    testImplementation(libs.robolectric)

    testImplementation(libs.leakcanary)
}

static def getVersionWithGitCommit(version) {
    Process process = "git rev-list --count HEAD".execute()
    process.waitFor()
    int commitCount = process.getText().toInteger()
    version * 100 + commitCount
}

def getUnsplashAccess() {
    return project.findProperty("unsplash_access_key")
}

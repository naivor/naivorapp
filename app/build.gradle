apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: "net.ltgt.apt"

def buildTime = new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
    }


    buildTypes {
        debug {
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/rxjava.properties'
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null) {
                def fileName = outputFile.name;

                if (fileName.startsWith('app') && fileName.endsWith('.apk')) {
                    fileName = fileName.replace("app", "${defaultConfig.applicationId}")
                            .replace(".apk", "-${defaultConfig.versionName}_${buildTime}.apk")
                }

                output.outputFile = new File(outputFile.parent, fileName)
            }

        }
    }

}

retrolambda {
    jdk System.getenv("JAVA_HOME")
    javaVersion JavaVersion.VERSION_1_7
    jvmArgs '-noverify'
    defaultMethods false
    incremental true
}

dependencies {

    compile fileTree(include: ['*.jar'], dir: 'libs')

    compile rootProject.ext.dependencies.appcompat_v7
    compile rootProject.ext.dependencies.recyclerview

    compile rootProject.ext.dependencies.butterknife
    annotationProcessor rootProject.ext.dependencies.butterknifeCompiler

    compile rootProject.ext.dependencies.rxjava
    compile rootProject.ext.dependencies.rxandroid

    compile rootProject.ext.dependencies.dagger
    annotationProcessor rootProject.ext.dependencies.daggerCompiler

    compile rootProject.ext.dependencies.retrofit
    compile rootProject.ext.dependencies.adapterRxjava
    compile rootProject.ext.dependencies.converterGson
    compile rootProject.ext.dependencies.loggingInterceptor

    compile rootProject.ext.dependencies.timber

    provided rootProject.ext.dependencies.lombok

    compile rootProject.ext.dependencies.ultraPtr

    compile rootProject.ext.dependencies.loadmore
    compile rootProject.ext.dependencies.adapter

    debugCompile rootProject.ext.dependencies.leakcanary_debug
    releaseCompile rootProject.ext.dependencies.leakcanary_release

    testCompile rootProject.ext.dependencies.junit

    testCompile rootProject.ext.dependencies.mockitoCore
    androidTestCompile rootProject.ext.dependencies.mockitoAndroid

    testCompile rootProject.ext.dependencies.robolectric

}

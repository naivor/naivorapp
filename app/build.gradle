apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.bugtags.library.plugin'


bugtags {
    appKey '79b099f46c4bd714fb389cafa4fe4018'
    appSecret 'dd9d82aceadbd3fe466c7cd5ed658cca'

}


android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
    }


    buildTypes {
        debug {
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    dexOptions {
        incremental true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null) {
                def fileName = outputFile.name;

                if (fileName.startsWith('app') && fileName.endsWith('.apk')) {
                    fileName = fileName.replace("app", "${defaultConfig.applicationId}")
                            .replace(".apk", "-${defaultConfig.versionName}.apk")
                }

                output.outputFile = new File(outputFile.parent, fileName)
            }

        }
    }

}


dependencies {

    compile fileTree(include: ['*.jar'], dir: 'libs')

    testCompile 'junit:junit:4+'

    compile rootProject.ext.dependencies["appcompat-v7"]
    compile rootProject.ext.dependencies["recyclerview"]
    compile rootProject.ext.dependencies["recyclerviewheader"]

    compile rootProject.ext.dependencies["butterknife"]

    compile rootProject.ext.dependencies["rxjava"]
    compile rootProject.ext.dependencies["rxandroid"]

    apt rootProject.ext.dependencies["dagger-compiler"]
    compile rootProject.ext.dependencies["dagger"]
    provided rootProject.ext.dependencies["javax.annotation"]

    compile rootProject.ext.dependencies["retrofit"]
    compile rootProject.ext.dependencies["adapter-rxjava"]
    compile rootProject.ext.dependencies["converter-gson"]
    compile rootProject.ext.dependencies["logging-interceptor"]

    compile rootProject.ext.dependencies["icepick"]
    provided rootProject.ext.dependencies["icepick-processor"]

    compile rootProject.ext.dependencies["fresco"]
    compile rootProject.ext.dependencies["imagepipeline-okhttp"]

    compile rootProject.ext.dependencies["auto-value"]

    compile rootProject.ext.dependencies["ultra-ptr"]

    compile rootProject.ext.dependencies["bugtags-lib"]

    compile rootProject.ext.dependencies["proguard-snippets"]

    compile rootProject.ext.dependencies["adapter"]
//    compile rootProject.ext.dependencies["loadmore"]

    compile rootProject.ext.dependencies["simplecropview"]

    compile rootProject.ext.dependencies["statusbaruitl"]

}
